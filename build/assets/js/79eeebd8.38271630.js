"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[144],{4213:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>u,frontMatter:()=>a,metadata:()=>r,toc:()=>h});var n=o(4848),i=o(8453);const a={},s="Blocks",r={id:"experiments/experiments/Human/DIYHand/Programming/Blocks/index",title:"Blocks",description:"So you want to try Block Code? Well, it\u2019s the easiest of the three options and it's surprisingly flexible too. When you first open the tab, you\u2019ll see an \u201con start\u201d block, like this.",source:"@site/docs/experiments/experiments/Human/DIYHand/Programming/Blocks/index.md",sourceDirName:"experiments/experiments/Human/DIYHand/Programming/Blocks",slug:"/experiments/experiments/Human/DIYHand/Programming/Blocks/",permalink:"/experiments/experiments/Human/DIYHand/Programming/Blocks/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"experimentsSidebar",previous:{title:"Python",permalink:"/experiments/experiments/Human/DIYHand/Programming/Python/"},next:{title:"Eye Potentials (The EOG)",permalink:"/experiments/experiments/Human/EOG/"}},l={},h=[];function d(e){const t={em:"em",h1:"h1",p:"p",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"blocks",children:"Blocks"}),"\n",(0,n.jsx)(t.p,{children:"So you want to try Block Code? Well, it\u2019s the easiest of the three options and it's surprisingly flexible too. When you first open the tab, you\u2019ll see an \u201con start\u201d block, like this."}),"\n",(0,n.jsx)(t.p,{children:"You\u2019ll want to keep that around, as well as familiarize yourself with the other tabs. They\u2019re all pretty self-explanatory, but just so you know now, we will mostly be using the \u201cVariables\u201d, \u201cBasic\u201d, \u201cPins\u201d, and \u201cSerial\u201d tabs. To help speed up finding certain things, always be sure to use the search tab. Now, let's begin!"}),"\n",(0,n.jsx)(t.p,{children:"Now that everything is open, you\u2019ll want to put out a \u201cForever\u201d block. It will be in the \u201cBasic\u201d tab, near the bottom. What this block will do is run something called a \u201cloop\u201d. This loop will update itself over and over, and you can put all kinds of things into this block to make something continuously."}),"\n",(0,n.jsx)(t.p,{children:"Now, to do anything with that block, you\u2019ll want to define variables. That's where the Variables tab comes in. First, you will want a tab to track the incoming EMG signals. We\u2019ll call that \u201ccurrentSignal\u201d. You set those by going to the Variables tab and just clicking \u201cMake a Variables\u201d, found here."}),"\n",(0,n.jsx)(t.p,{children:"Now, you\u2019ll want to click it, then set your variables name. For the sake of this tutorial, the version you see will be called \u201ccurrentSignal\u201d. Whatever you name this variable will be tracking the EMG signals. And, in the Variables tab, there will not be a few blocks to start using your variable."}),"\n",(0,n.jsx)(t.p,{children:"To use currentSignal to do anything, you\u2019ll need to put it into the \u201cOn Start\u201d block, then set it to 0. This is done because the variable will be changed, and the code needs a \u201cstarting point\u201d."}),"\n",(0,n.jsx)(t.p,{children:"And, for future reference, anything you put in the \u201cOn Start\u201d block will normally be variables, methods and other things like that should be put into loops, logic blocks or \u201cForever\u201d."}),"\n",(0,n.jsx)(t.p,{children:"You will also need to set a previousSignal variable, so you can track what the currentSignal JUST was. This is important to compare the two so you can tell if you\u2019ve stopped flexing your muscles. You\u2019ll also set this variable to 0 in the On Start block, and you can really name it whatever you want. But, for this tutorial, it will be previousSignal."}),"\n",(0,n.jsx)(t.p,{children:"You\u2019re also going to need to add a variable that will track how much you\u2019re going to move the servo. We could use a lot of blocks to make the servo move if you flex hard enough inside the \u201cForever\u201d block, but a big part of coding is learning how to simplify a solution and make it as efficient as possible. So, we\u2019re going to make a variable that can be edited outside of your \u201cForever\u201d block. It will be called \u201cangleAdded\u201d.\\"}),"\n",(0,n.jsx)(t.p,{children:"The servo moves based on angles, but because it's glued and tied to the hand and the pencil, it can\u2019t move a full 360 degrees to make a circle without breaking itself or the pencil/hand. You need to set a kind of limit for how low and high your angles can be. These variables will be MAX_ANGLE and MIN_ANGLE. Once again, put them in your \u201cOn Start\u201d block and set your MAX_ANGLE to an amount below 140. Setting it below 140 means it won\u2019t start grinding and potentially break itself."}),"\n",(0,n.jsx)(t.p,{children:"Now that you have your variables, you\u2019ll want to start using them in your \u201cForever\u201d block. To start, you need to make it so that the code knows you want to make previousSignal equal to the currentSignal, but just a little bit ago. This means you need to go to the \u201cFunctions\u201d tab. Here, you\u2019ll find a menu that should look like this."}),"\n",(0,n.jsx)(t.p,{children:"You can name it too, so in this tutorial, it will be \u201ccompareSignals\u201d."}),"\n",(0,n.jsx)(t.p,{children:"Click \u201cdone\u201d and you can move on to using it. Now, you will need to make previousSignal equal to currentSignal with a \u201cSet variable to _\u201d block from within the variable menu."}),"\n",(0,n.jsx)(t.p,{children:"It's the first of two options, and you can set the variable inside the block of code to \u201cpreviousSignal\u201d with the dropdown arrow."}),"\n",(0,n.jsx)(t.p,{children:"Now, you want to change the 0 with \u201ccompareSignal\u201d. This block of code will make it so that previousSignal is equal to currentSignal. You can drag the currentSignal block out of the variable menu and put it right in the space where 0 is."}),"\n",(0,n.jsx)(t.p,{children:"Now, you need to make it so that, when the code is looking for previousSignal, it will just be a delayed version of currentSignal. What it JUST was. So, to do that, you need to use something called a \u201cpause\u201d block. It's in the Basic menu, but you can also just search for it."}),"\n",(0,n.jsx)(t.p,{children:"With that block, your data will be put on hold for a bit.  But, because the pause block counts everything in milliseconds, you need to remember to set your numbers in hundreds if you want it to wait a second or more. Luckily, the block already does that, so if you want a seconds worth of delay, it has you covered. Now, put this block into your version of the \u201ccompareSignals\u201d function."}),"\n",(0,n.jsxs)(t.p,{children:["From here, you\u2019ll need to start using the\u2013hopefully\u2013empty forever block. Firstly, you want to make it so that your compareSignals variable is showing the data from your EMG readings. If you read the micro",":bit-based"," introduction, you\u2019ll know that the motherboard and the micro",":bit"," use a pin system to give and receive information. Its a bit like mailing addresses. To make sure the right information is sent to and received by the right places, you have to define where it's going. So, by setting currentSignals to Pin0, you\u2019re making sure that the code is being sent to and received by the right places. A lot like the last step, you\u2019re going to choose a \u201cset variable to _\u201d block, then put it in your forever block."]}),"\n",(0,n.jsx)(t.p,{children:"Now, you need to either search for, or find an \u201canalog read pin\u201d block. It should be round like a circle, and if you want to go looking for it, it should be at the top of the pins tab, as seen here."}),"\n",(0,n.jsx)(t.p,{children:"Like with the compareSignals function, all you need to do is drag and drop \u201canalog read pin\u201d into the block where 0 currently is and you\u2019re all set! And, because the block is already set to pin 0, you don\u2019t need to worry about changing the block's information."}),"\n",(0,n.jsx)(t.p,{children:"Now, so you can actually see what the data is that you\u2019re being sent from your EMG electrodes, you\u2019re going to need to grab a \u201cserial write value\u201d block from the serial section. As seen here:"}),"\n",(0,n.jsx)(t.p,{children:"Place it below the \u201cset currentSignal\u201d block, and put \u201ccurrentSignal\u201d into the spot where the 0 should be. What this will do is create a small graph you can look at and see what the EMG values are."}),"\n",(0,n.jsxs)(t.p,{children:["Which you can view in this \u201cshow data; device\u201d tab, beneath the virtual version of your micro",":bit","."]}),"\n",(0,n.jsx)(t.p,{children:"When you open it, having made your code, it should look like this."}),"\n",(0,n.jsx)(t.p,{children:"Your values don\u2019t need to be the same as what you see here, but you should see a little line that rises and falls if you\u2019re flexing your muscles or not."}),"\n",(0,n.jsx)(t.p,{children:"Now you need to use a conditional statement. These are blocks of code that check if something is happening, then do something in response. If anything else is happening, it either does nothing, or it can do something else. They\u2019re like small gates that tell the code whether or not it should do something if the right thing is trying to get through the gate. To find an if/else conditional statement, either search for it, or look here in the \u201clogic\u201d tab."}),"\n",(0,n.jsx)(t.p,{children:"Put it in your forever block, then grab one of the \u201ccomparison\u201d blocks. Don\u2019t worry about which one, you can edit what the symbol is between the 0\u2019s like you can with the variable blocks drop-down. This will go where the \u201ctrue\u201d currently is in the block of \u201cif/else\u201d code. By the end, it should look like this."}),"\n",(0,n.jsx)(t.p,{children:"To make a lot of things easier, you will want to create a new variable to put in your \u201cOn Start\u201d block. This variable will be called \u201cthreshold\u201d, and the variable will make sure that if you\u2019ve flexed your arm hard enough, the motor in your neuroprosthetic will keep moving, even if it's just a little over that amount. You can make a new variable in the variable tab, like you did before."}),"\n",(0,n.jsx)(t.p,{children:"Name it \u201cthreshold\u201d, then put a \u201cset threshold to _\u201d block in your On Start block."}),"\n",(0,n.jsx)(t.p,{children:"A lot of other blocks have been set to 0 because you need to change those numbers later in the code and you want those numbers to be at the lowest amount possible, so you can add a lot to them. With your threshold though, you\u2019ll want this to be at a set amount. This is because once you find the right number, it doesn't need to change. For this tutorial, it will be set to 200. Feel free to change it for your own code."}),"\n",(0,n.jsx)(t.p,{children:"In a way, it's a lot like your MAX_ANGLE and MIN_ANGLE variables. But, now that you have threshold defined, you want to put it in the comparison in your if/else statement, because if your currentSignal is higher than the threshold, your code will know to start moving the servo and keep it moving until currentSignal isn\u2019t the same or greater than your threshold."}),"\n",(0,n.jsx)(t.p,{children:"Also, be sure to change the symbol for the comparison so that it is \u201cgreater than or equal to\u201d rather than just \u201cgreater than\u201d. This will make sure that even if your currentSignal just barely meets the threshold, it will still move."}),"\n",(0,n.jsx)(t.p,{children:"Now, so the code knows whether or not you\u2019re flexing your muscles, The code knows it needs to do something if currentSignal is greater than your threshold. So, you have to tell it what that something is. In this case, you\u2019ll want to use a servo block. Either search for \u201cservo write pin\u201d or scroll down to the bottom of the pins menu, as seen here."}),"\n",(0,n.jsxs)(t.p,{children:["As you\u2019ve learned before, micro",":bit"," has a pin system. The pin to send information to your servo is pin 8. You can select it in the dropdown menu where \u201cP0\u201d is. It should say \u201c( write pin only )\u201d in front of it. All this really means is that it can only tell other things, like a motor, what to do. It can\u2019t give the code, or you, any information. When you put it into your if/else statement, it should look like this."]}),"\n",(0,n.jsx)(t.p,{children:"You might\u2019ve noticed the number right at the end of that block. That number is the amount of degrees you want to move the servo on your hand. So you can change how many degrees the servo moves outside of that line of code, you have to set it to a variable you have somewhere else in your code. Otherwise, you have to keep coming back and changing the one line of code over and over to get it right. It makes it a lot faster! So, replace that 0 with your \u201cangleAdded\u201d variable."}),"\n",(0,n.jsx)(t.p,{children:"Then, you\u2019ll want to add another line to the code by pressing the \u201c+\u201d symbol at the bottom of your if/else statement, just underneath the else section."}),"\n",(0,n.jsx)(t.p,{children:"In the empty space after \u201cif\u201d, you will have to put another comparison, a lot like the one that compares currentSignal and threshold. Only this time, it will compare if currentSignal is less than or equal to previousSignal. Like this:"}),"\n",(0,n.jsx)(t.p,{children:"The reason for this is that if your previousSignal is greater than your currentSignal, that means you\u2019re flexing less than before, so the servo shouldn\u2019t be moving. Also, you can delete the \u201celse\u201d section if you want to by hitting the \u201c-\u201d button at the end of its space."}),"\n",(0,n.jsx)(t.p,{children:"Now, to make angleAdded change and actually move the servo, you\u2019re going to need to add a few more variables blocks into your \u201cif\u201d or \u201celse if\u201d spaces. If you remember how you set currentSignal to pin 0, you\u2019ll need to do something similar here. But instead of setting it to anything, the block will instead be \u201cchange variable by\u201c block. It's the second one down when you open the menu."}),"\n",(0,n.jsx)(t.p,{children:"What does this mean? This means that angleAdded to will change ( add, divide, multiple or subtract ) based on whether or not currentSignal is meeting your threshold, or if it's less than it was before ( previousSignal ). In the first line, the if section, you\u2019ll want to put a \u201cchange variable by_\u201d block down, and set the variable to angleAdded."}),"\n",(0,n.jsx)(t.p,{children:"Now, search \u201cadd\u201d or \u201csubtract\u201d, or go to the math tab and find the block of code that looks like 0 being added to 0."}),"\n",(0,n.jsx)(t.p,{children:"From here, put it into the bubble with a \u201c1\u201d in it in the angleAdded block."}),"\n",(0,n.jsx)(t.p,{children:"Now, it might seem odd, but you\u2019re going to want to leave the left bubble as 0, and only change the right bubble. You\u2019re doing this because angleAdded is already at 0, so by setting the variable as 0 plus anything, it will only increase by the amount you add. For this tutorial, the right 0 will be set to 20."}),"\n",(0,n.jsx)(t.p,{children:"You also have to do the same thing in your \u201celse if\u201d section, and that includes your block that changes pin 8. This way, your motor will be told how much to move, and decrease angleAdded. So, if you stop flexing your muscle, angleAdded will go down and your servo will decrease as well. In the end, it should look like your \u201cif\u201d section, just with a subtraction symbol rather than an addition symbol."}),"\n",(0,n.jsx)(t.p,{children:"By now, you should have a claw that can raise or lower based on whether or not you\u2019re flexing! However, you might be running into a few issues. For example, your pencil might be moving too far, causing your servo's gears to grind, or maybe the servo just gets stuck and doesn\u2019t move. This is where you need to add more variables and functions to make sure your servo doesn\u2019t go too far, and that it is always moving whenever there is an input. Firstly, you\u2019ll want to create a new variable called \u201clowThreshold\u201d, for when your servo reaches a certain point. Set it to any number below ten, then put it in your \u201con start\u201d block."}),"\n",(0,n.jsx)(t.p,{children:"Then, you will need to expand your if/else if statement. You\u2019ll have to expand it twice to get a new \u201celse if\u201d section ( You should also probably delete the \u201celse\u201d section that is created in the process ). In the empty space, after \u201celse if\u201d, you need to put a comparison operator like the ones you have for currentSignal and threshold."}),"\n",(0,n.jsx)(t.p,{children:"Then, put currentSignal in the left and lowThreshold in the right. Change the symbol to a \u201cless than or equal to\u201d symbol and it's done. This will check if your currentSignal ever falls in a low range when you unflex, and it tells the code to start doing something if that happens."}),"\n",(0,n.jsx)(t.p,{children:"All that's left to do with your new variable is to tell your code what happens if currentSignal is less than or equal to it. For that, copy and paste the \u201cservo write pin\u201d block into the empty space."}),"\n",(0,n.jsx)(t.p,{children:"Then, copy another \u201cchange angleAdded\u201d block and put it right above the \u201cservo write pin\u201d block. But instead of \u201c20\u201d, here you\u2019re going to put \u201cangleAdded\u201d into the empty space after the minus sign."}),"\n",(0,n.jsx)(t.p,{children:"Why? Because by subtracting angleAdded from angleAdded if the signal gets too low, you\u2019re basically telling the code that if it isn't getting a high enough signal from your muscles, it needs to make your hand unclench and set the servo to 0."}),"\n",(0,n.jsx)(t.p,{children:"All that's left to do is create a way to limit your servo so it stays between two specific points. Think of it like a ladder. \u201cangleAdded\u201d is a lot like whatever step your servo is on at any second, but there's a bottom step and a top step. Obviously, you don\u2019t want angleAdded going too high and breaking something in your servo, like how you might break your leg falling off a ladder. And angleAdded also shouldn\u2019t go below the bottom step and put its imaginary foot through the floor. So, you as the coder have to make something called a \u201cclamp\u201d. This will make sure your code knows to not go over or under the top and bottom steps. You start by grabbing a new \u201cset angleAdded\u201d block from your variables folder. Don\u2019t worry about order, as long as it's outside the \u201cif/else\u201d statement, but inside the forever block, you\u2019ll be okay."}),"\n",(0,n.jsx)(t.p,{children:"From here, you have to find a new math block called \u201cmax of _\u201d with two empty bubbles after it with zeroes in it. If you type in \u201cmax of\u201d, you can find it in your search bar."}),"\n",(0,n.jsx)(t.p,{children:"And, because this is going to be a clamp for the \u201ctop\u201d and \u201cbottom\u201d, you need to put the MIN_ANGLE into the left-most bubble."}),"\n",(0,n.jsx)(t.p,{children:"Then, put another operator that\u2019s similar to \u201cmax of\u201d, but this time, it's \u201cmin of\u201d."}),"\n",(0,n.jsx)(t.p,{children:"Inside the first bubble, put \u201cangleAdded\u201d, and inside the second put \u201cMAX_ANGLE\u201d."}),"\n",(0,n.jsxs)(t.p,{children:["The end result should look like this. As for why things are ordered like this inside the \u201cmax of\u201d statement, you need to understand how the \u201cmax\u201d and \u201cmin\u201d methods work in coding. Basically, within the \u201cmin of ",(0,n.jsx)(t.em,{children:"\u201d section, the code is checking if angleAdded is above the MAX_ANGLE, and if it is, it sets it to that amount. Then, it does the opposite with the \u201cmax of"}),"\u201d section. Basically, if it's less than MIN_ANGLE\u20130 in this case\u2013it puts it there. And the code does this infinitely, so you don\u2019t have to worry about this being a problem for later unless it is coded wrong."]}),"\n",(0,n.jsx)(t.p,{children:"Here\u2019s a few challenges and extra puzzles to solve once you have it working!"}),"\n",(0,n.jsx)(t.p,{children:"Can you make an animation play based on the currentSignal? ( Hint: Try looking into the \u201cBasic\u201d tab )\r\nCan you make a song play the harder you flex? ( Hint: The Music tab is always an option )\r\nCan you try to remake the code with entirely new variable names and start the project from scratch?\r\nCan you make the hand only go to MAX_ANGLE and MIN_ANGLE like a fast-twitch muscle when currentSignal reaches its threshold?"})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>s,x:()=>r});var n=o(6540);const i={},a=n.createContext(i);function s(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);