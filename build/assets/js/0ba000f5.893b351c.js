"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[957],{8809:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var n=o(4848),i=o(8453);const a={sidebar_position:2},r="Python",s={id:"experiments/experiments/Human/DIYHand/Programming/Python/index",title:"Python",description:"Python is seen by many as a kind of universal coding language. It's simple, doesn\u2019t require you to define anything but what the variables are equal to, and the process of making functions and editing variables is super easy. This will be a good entry point into coding if you want to learn the barebones concepts and still write it yourself without any blocks.",source:"@site/docs/experiments/experiments/Human/DIYHand/Programming/Python/index.md",sourceDirName:"experiments/experiments/Human/DIYHand/Programming/Python",slug:"/experiments/experiments/Human/DIYHand/Programming/Python/",permalink:"/experiments/experiments/Human/DIYHand/Programming/Python/",draft:!1,unlisted:!1,tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"experimentsSidebar",previous:{title:"JavaScript",permalink:"/experiments/experiments/Human/DIYHand/Programming/JS/"},next:{title:"Blocks",permalink:"/experiments/experiments/Human/DIYHand/Programming/Blocks/"}},l={},u=[];function h(e){const t={h1:"h1",p:"p",...(0,i.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.h1,{id:"python",children:"Python"}),"\n",(0,n.jsx)(t.p,{children:"Python is seen by many as a kind of universal coding language. It's simple, doesn\u2019t require you to define anything but what the variables are equal to, and the process of making functions and editing variables is super easy. This will be a good entry point into coding if you want to learn the barebones concepts and still write it yourself without any blocks."}),"\n",(0,n.jsx)(t.p,{children:"So, it is heavily suggested you use the Python Editor, because the translation between Java and blocks to Python is not always very accurate. When you do open the editor, it should look something like this."}),"\n",(0,n.jsx)(t.p,{children:"First things first, you\u2019ll have to delete everything but the first line of text and the comment above it. This should be all that\u2019s left."}),"\n",(0,n.jsx)(t.p,{children:"So what does it mean? Basically, the \u201cimports\u201d the code is talking about is you telling your code to pull out some information from what's called a library. In these libraries, there's a lot of information about how certain bits of code should work. For the purposes of this code, you\u2019re drawing from the microbit library so your code knows what to do with certain lines of code."}),"\n",(0,n.jsx)(t.p,{children:"Now that that's been covered, you will need to define variables. It's a lot like saying \u201cx=10\u201d. Normally, you would have to say what kind of variable you\u2019re defining, but here, that's not an issue. You\u2019re working in Python! Here, you just have to title your variable, and the first variable you need to define is your \u201cservo_pin\u201d. And yes, you do need to write it that way, it's important for later."}),"\n",(0,n.jsxs)(t.p,{children:["Note the red dot. It just means something is wrong with the code and it needs to be fixed. Here, it\u2019s just that your variable needs to be equal to something. If you remember how micro",":bits"," pin systems work, you\u2019ll know that to send data to your servo, you have to send it through pin eight. So, after your equal sign, write in \u201cpin8\u201d."]}),"\n",(0,n.jsxs)(t.p,{children:["From here, you need to do something and define a new variable called \u201cAnalog\u201d. You will use this later to get data from those EMGs you should have placed on your forearm and the back of your. You\u2019ll write it similarly to the first variable, but this time you\u2019ll be setting it to \u201cpin0\u201d instead, this is because it's your general receiver pin on your micro",":bit"," board."]}),"\n",(0,n.jsx)(t.p,{children:"Now, you need to create something called a method. A lot of the time, they need to be used inside of a function\u2013more on those later\u2013so you normally just can\u2019t use them outside of a function. Here, the method can be used outside of a function. Write this into your code:"}),"\n",(0,n.jsx)(t.p,{children:"What does this do? It uses your \u201cservo_pin\u201d variable and does a bit of computer work behind-the-scenes to tell your servo how long it should run. The servo uses little bursts of electricity\u2013imagine it a lot like a switch being \u201con\u201d or \u201coff\u201d-- and a thing called a \u201cduty cycle\u201d calculates how long your servo will be \u201con\u201d or \u201coff\u201d. If it's on for half the time, then you have a 50% duty cycle, if it's only on for a quarter of the time, then it has a 25% duty cycle. If we apply this to servos, this means that the motor is \u201con\u201d or \u201coff\u201d inside the servo half the time, or a quarter of the time. Now, that number can get bigger or smaller, and however much it is, it determines how much your motor rotates and how powerful it is. So what you\u2019re doing with this line of code is saying \u201cI want my motor to have a duty cycle of 20 milliseconds\u201d. This means that those \u201con\u201ds and \u201coff\u201ds you send your motor will only happen in those 20 milliseconds and update after 20 milliseconds. You\u2019ll define how long your motor is \u201con\u201d and \u201coff\u201d later though."}),"\n",(0,n.jsx)(t.p,{children:"Because your motor on your neuroprosthetic is going to be moving in angles\u2013like a circle\u2013you\u2019ll have to create a maximum angle it\u2019s allowed to move to, and a minimum angle that it starts at. These can be written like this:"}),"\n",(0,n.jsx)(t.p,{children:"It's a good idea to set your Maximum to 180 and your Minimum to 0. Why? Because if it moves past 180 degrees, it might bend or break something more than you want, because 180 degrees is effectively looking from your right to your left. If you look too far to your left though, you could hurt your neck. The same idea is applied here, but with a pencil and a motor."}),"\n",(0,n.jsx)(t.p,{children:"Next, you\u2019ll need to start making a function. They work just like a math problem, you put in something, then you get something back. What's different when it comes to coding is just the way you write it, and that its a lot more flexible. Some functions you can even put words into, and get out a whole sentence, or a series of letters, or even make something jump up and down in a videogame! For this, you want to write \u201cdef\u201d first to tell the code you\u2019re making a function."}),"\n",(0,n.jsx)(t.p,{children:"Then, you can name the function whatever you want. For the sake of this tutorial, it will be named \u201csetSignal\u201d in every image you see. It's important to note that if you want a function to be recognized as a function, you have to put two parentheses at the end of your name for it and a colon, like this."}),"\n",(0,n.jsx)(t.p,{children:"From here, you have to outline your math problem. For this, you need to also know about a new concept called \u201cglobal variables\u201d. Effectively, global variables are variables you\u2019ve told the code that can be edited. Here, you\u2019re going to write \u201cglobal\u201d into your function. Make sure to indent though, Python is very strict about indenting."}),"\n",(0,n.jsx)(t.p,{children:"Then, define a new variable inside your function called \u201ccurrentSignal\u201d. You\u2019ll use this to keep track of the data you\u2019re sending with your EMG signals."}),"\n",(0,n.jsx)(t.p,{children:"To do that, you use the \u201cAnalog\u201d variable you defined earlier to make currentSignal equal to everything coming through pin0 with this line of code."}),"\n",(0,n.jsx)(t.p,{children:"After that, you have to make a \u201cwhile True\u201d loop that will stay running in the background effectively forever. Loops do that in code, and a \u201cwhile True\u201d loop in Python will perform a function over and over until you tell it specifically to stop, or until something in no longer True. Start by writing \u201cwhile True\u201d."}),"\n",(0,n.jsx)(t.p,{children:"Now, you have to call the function you just made. What this means is that you just write the name of a function\u2013with the parentheses after its name\u2013so that your code knows to use whatever that function does in the loop or function you\u2019re calling it in."}),"\n",(0,n.jsx)(t.p,{children:"Next, you\u2019re going to define another variable as \u201cglobal\u201d. This will be the angle you tell your servo to move to. Then, below that, you have to write \u201cangleAdded =\u201d, so you can edit what angleAdded is equal to."}),"\n",(0,n.jsx)(t.p,{children:"After that, you\u2019ll want to write \u201cint\u201d after the equal sign. This is because what you\u2019re making the angleAdded equal to is going to be a number and making the rest of that line of code an \u201cint\u201d ( short for integer ) means that it will be equal to a number."}),"\n",(0,n.jsx)(t.p,{children:"This is where things get a little bit difficult to understand. To make your servo move the amount you want it to, you can\u2019t take your data from your EMG and plug it directly into a method and make your servo move that amount. Why? Because your servo uses something called PWM ( Pulse Width Modification ) to move the servo. It doesn\u2019t use degrees, it uses a bit of algebra to take inputs and affect the duty cycle of the servo with its outputs. This is how you control how long your servo is \u201con\u201d and long it is \u201coff\u201d."}),"\n",(0,n.jsx)(t.p,{children:"So, because you can\u2019t just plug currentSignal right into a method to make your servo move, you need to \u201cscale\u201d it. This basically just means you need to do some math to take one value and make it make sense in another format. Like decimals to fractions and vice versa. In coding, you\u2019re taking an EMG Signal and transferring it to a PWM Signal. For that, you will divide currentSignal by 1023 inside a set of parentheses. This is because, given the system you\u2019re using, 1023 is the max PWM signal value you can have."}),"\n",(0,n.jsx)(t.p,{children:"And yes, those extra parenthese will be important later, make sure to type the code exactly like that."}),"\n",(0,n.jsx)(t.p,{children:"Now, you need to do something called setting a range. This range will make sure that your servo doesn\u2019t \u201churt its neck\u201d, like in the example I gave earlier. Basically, if your servo moves too far in either direction, it could break itself or a part of your hand. It's like having a top floor in a hotel and a bottom floor, and an elevator inside it. So putting a kind of \u201ctop floor\u201d and \u201cbottom floor\u201d limits how much your signal\u2013the elevator in the hotel, in this example\u2013can move up and down the floors. You would do this like so:"}),"\n",(0,n.jsx)(t.p,{children:"With this code, you\u2019re multiplying the currentSignal\u2013divided by the maximum PWM signal value\u2013by your MAX_ANGLE. Because MIN_ANGLE is equal to 0, you\u2019re really just multiplying the divided currentSignal by 180. Using your minimum in making ranges is an important habit though, so keep all uses of those in the code."}),"\n",(0,n.jsx)(t.p,{children:"After you\u2019ve done all that, you just have to tell your servo that it has to move by some amount. That amount is going to be \u201cangleAdded\u201d. All the work you just did with currentSignal and setting a range means you\u2019ll have a number the code can take in and move your servo with. To do that, you\u2019ll have to use pin8, so write \u201cservo_pin\u201d in the while True loop first."}),"\n",(0,n.jsx)(t.p,{children:"Now, write a \u201c.\u201d and follow it with \u201cwrite_analog()\u201d. This won\u2019t call your Analog variable, but it will send the instructions your code made to your servo. By the end it, it should look like this:"}),"\n",(0,n.jsx)(t.p,{children:"You have to make sure to put \u201cangleAdded\u201d in the parentheses however, because that's the number that the \u201ccurrentSignal/1023\u201d math problem will put out to move your servo."}),"\n",(0,n.jsx)(t.p,{children:"Enjoy your neuroprosthetic! If you feel up to the challenge, here are a few open-ended questions to test what you can do with everything you\u2019ve learned."}),"\n",(0,n.jsx)(t.p,{children:"-Can you make an animation play based on how strong your currentSignal is?"}),"\n",(0,n.jsx)(t.p,{children:"-Can you make it so that you define all parts of your and don\u2019t have to use any numbers like 1023 in your loops or functions at all?"}),"\n",(0,n.jsxs)(t.p,{children:["-Can you make a word appear on your micro",":bit"," if you make the hand flex?"]}),"\n",(0,n.jsx)(t.p,{children:"-Can you make the hand react to button inputs instead?"})]})}function d(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(h,{...e})}):h(e)}},8453:(e,t,o)=>{o.d(t,{R:()=>r,x:()=>s});var n=o(6540);const i={},a=n.createContext(i);function r(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);